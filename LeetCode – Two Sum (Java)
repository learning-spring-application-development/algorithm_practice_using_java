package leetecode;

/**
 * Given an array of integers, find two numbers such that they add up to a
 * specific target number.
 * 
 * The function twoSum should return indices of the two numbers such that they
 * add up to the target, where index1 must be less than index2. Please note that
 * your returned answers (both index1 and index2) are not zero-based.
 * 
 * You may assume that each input would have exactly one solution.
 * 
 * Input: numbers={2, 7, 11, 15}, target=9
 * 
 * Output: index1=1, index2=2
 * 
 * @author Ravi
 *
 */

public class TwoSum {
	public static void main(String[] args) {
		int[] nums = { 2, 7, 11, 15, 16, 111, 569, 777, 895, 963 };

		int[] temp = new Solution().twoSum(nums, 965);
		if (temp[0] != 0) {
			System.out.println("Index starting from 1");
			System.out.println("index1=" + temp[0]);
			System.out.println("index1=" + temp[1]);
		} else {
			System.out.println("No match");
		}
	}
}

class Solution {
	public int[] twoSum(int[] nums, int target) {
		int[] temp = new int[2];
		for (int i = 0; i < nums.length - 1; i++) {
			for (int j = i + 1; j < nums.length; j++) {
				if ((nums[i] + nums[j]) == target) {
					temp[0] = i + 1;
					temp[1] = j + 1;
				}
			}
		}
		return temp;
	}
}
