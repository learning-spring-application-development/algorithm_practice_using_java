/**
 * You are given two linked lists representing two non-negative numbers. 
 * The digits are stored in reverse order and each of their nodes contain a single digit.
 *  Add the two numbers and return it as a linked list.
 *  
 *  Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
 *  
 *  Output: 7 -> 0 -> 8
 *  
 *  @author Ravi
 */

package leetecode;

public class AddTwoNumbers {

	public static void main(String[] args) {

		/* First Singly Linked List */
		ListNode listOneNodeOne = new ListNode(2);
		ListNode listOneNodeTwo = new ListNode(4);
		ListNode listOneNodeThree = new ListNode(3);
		listOneNodeOne.next = listOneNodeTwo;
		listOneNodeTwo.next = listOneNodeThree;

		/* Second Singly Linked List */
		ListNode listTwoNodeOne = new ListNode(5);
		ListNode listTwoNodeTwo = new ListNode(6);
		ListNode listTwoNodeThree = new ListNode(4);
		listTwoNodeOne.next = listTwoNodeTwo;
		listTwoNodeTwo.next = listTwoNodeThree;

		ListNode resultList = addTwoNumbers(listOneNodeOne, listTwoNodeOne);
		System.out.println(resultList.val + " -> " + resultList.next.val
				+ " -> " + resultList.next.next.val);

	}

	public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {

		if (l1 == null) {
			return l2;
		}

		if (l2 == null) {
			return l1;
		}

		ListNode node1 = l1;
		ListNode node2 = l2;
		ListNode resuListNode = new ListNode(0);
		ListNode temp = resuListNode;

		int carry = 0;
		while (node1 != null || node2 != null) {
			if (node1 != null) {
				carry += node1.val;
				node1 = node1.next;
			}
			if (node2 != null) {
				carry += node2.val;
				node2 = node2.next;
			}
			temp.next = new ListNode(carry % 10);
			temp = temp.next;
			carry = carry / 10;
		}
		if (carry != 0) {
			temp.next = new ListNode(carry);
		}
		return resuListNode.next;
	}
}

/**
 * Definition for singly-linked list.
 */
class ListNode {
	int val;
	ListNode next;

	ListNode(int x) {
		val = x;
		next = null;
	}
}
